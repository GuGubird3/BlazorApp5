@page "/"
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IHttpClientFactory HttpClientFactory
@using BlazorApp5.ApiServers
@inject ApiService ApiService
@using BlazorApp5.MES.Examples.Data.Models



<PageTitle>Line Config</PageTitle>
<MudDataGrid Class="white-grid-icons" T="LineItem" Items="@Elements" ReadOnly="false" EditMode="DataGridEditMode.Form"
             Bordered="true" Dense="true" RowClick="@OnRowClick" >
    <Columns>
        <PropertyColumn Property="x => x.Customer" Title="Customer" Class="my-table" HeaderClass="mud-theme-dark font-weight: bold" Editable="true"/>
        <PropertyColumn Property="x => x.lineName" Class="my-table" HeaderClass="mud-theme-dark"/>
        <PropertyColumn Property="x => x.partClass" Class="my-table" HeaderClass="mud-theme-dark"/>
        <PropertyColumn Property="x => x.csfileName" Title="csfileName" Class="my-table" HeaderClass="mud-theme-dark"/>
    </Columns>
</MudDataGrid>

<MudDialog @ref="dialog" Options="@dialogOptions" >
    <TitleContent>
        <MudText Typo="Typo.h6">参数配置页面</MudText>
    </TitleContent>
    <DialogContent>
        @if (selectedItem != null)
        {
            <MudStack >
                @foreach (var prop in selectedItem.GetType().GetProperties())
                {
                    <MudTextField T="string" Label="@prop.Name" Variant="Variant.Outlined" value="@(prop.GetValue(selectedItem)?.ToString() ?? string.Empty)" Style="width: 400px;" />
                }
            </MudStack>
        }
    </DialogContent>
    <DialogActions>
        <dev style="display: flex; justify-content: space-between; align-items: center; gap: 16px;  margin-left: 16px; margin-right: 16px;">
            <MudButton Style="margin-left: auto;" Class="wide-button" Variant="Variant.Outlined" Color="Color.Primary" OnClick="CloseDialog">保存</MudButton>
            <MudButton Style="margin: 0 auto;" Class="wide-button" Variant="Variant.Outlined" OnClick="CloseDialog">取消</MudButton>
            <MudButton Style="margin-right: auto;" Class="wide-button" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CloseDialog">删除</MudButton>
        </dev>
    </DialogActions>
</MudDialog>

@code {
    private IEnumerable<LineItem> Elements = new List<LineItem>();
    private List<string> _events = new();
    private MudDialog dialog = null!; // 对话框引用
    private DialogOptions dialogOptions = new() { CloseButton = true }; // 对话框配置
    private LineItem selectedItem = new LineItem(); // 存储当前选中行

    protected override async Task OnInitializedAsync()
    {
        //var httpClient = HttpClientFactory.CreateClient("ServerAPI");
        Elements = await ApiService.GetTestElementAsync("ServerAPI", "webapi/linetable");
    }

        // 新增：行点击事件
    private async Task OnRowClick(DataGridRowClickEventArgs<LineItem> args)
    {
        selectedItem = args.Item; // 存储当前点击的行数据
        await dialog.ShowAsync(); // 显示对话框
    }

    // 新增：关闭对话框
    private void CloseDialog()
    {
        dialog.CloseAsync();
    }

}

